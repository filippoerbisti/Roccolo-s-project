"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GeopointArrayDiff = void 0;

var React = _interopRequireWildcard(require("react"));

var _GoogleMapsLoadProxy = require("../loader/GoogleMapsLoadProxy");

var _Map = require("../map/Map");

var _GeopointMove = require("./GeopointMove");

var _GeopointFieldDiff = require("./GeopointFieldDiff.styles");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var GeopointArrayDiff = _ref => {
  var diff = _ref.diff,
      schemaType = _ref.schemaType;
  return /*#__PURE__*/React.createElement(_GeopointFieldDiff.RootContainer, null, /*#__PURE__*/React.createElement(_GoogleMapsLoadProxy.GoogleMapsLoadProxy, null, api => /*#__PURE__*/React.createElement(GeopointDiff, {
    api: api,
    diff: diff,
    schemaType: schemaType
  })));
};

exports.GeopointArrayDiff = GeopointArrayDiff;

function GeopointDiff(_ref2) {
  var api = _ref2.api,
      diff = _ref2.diff;
  var fromValue = (diff.fromValue || []).filter(hasCoordinates);
  var toValue = (diff.toValue || []).filter(hasCoordinates);

  if (fromValue.length === 0 && toValue.length === 0) {
    return null;
  }

  var bounds = getBounds(fromValue, toValue, api);
  return /*#__PURE__*/React.createElement(_Map.GoogleMap, {
    api: api,
    location: bounds.getCenter().toJSON(),
    mapTypeControl: false,
    controlSize: 20,
    bounds: bounds
  }, map => /*#__PURE__*/React.createElement(React.Fragment, null, diff.items.map(_ref3 => {
    var toIndex = _ref3.toIndex,
        pointDiff = _ref3.diff;

    if (!isChangeDiff(pointDiff)) {
      return null;
    }

    return /*#__PURE__*/React.createElement(_GeopointMove.GeopointMove, {
      key: toIndex,
      api: api,
      map: map,
      diff: pointDiff,
      label: "".concat(toIndex)
    });
  })));
}

function isChangeDiff(diff) {
  return diff.action !== 'unchanged' && diff.type === 'object';
}

function hasCoordinates(point) {
  return typeof point.lat === 'number' && typeof point.lng === 'number';
}

function getBounds(fromValue, toValue, api) {
  var bounds = new api.LatLngBounds();
  var points = [...(fromValue || []), ...(toValue || [])];
  points.forEach(point => bounds.extend(point));
  return bounds;
}