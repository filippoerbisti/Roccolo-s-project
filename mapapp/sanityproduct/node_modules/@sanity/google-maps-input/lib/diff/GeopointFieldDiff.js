"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GeopointFieldDiff = void 0;

var React = _interopRequireWildcard(require("react"));

var _diff = require("@sanity/field/diff");

var _GoogleMapsLoadProxy = require("../loader/GoogleMapsLoadProxy");

var _Map = require("../map/Map");

var _GeopointMove = require("./GeopointMove");

var _GeopointFieldDiff = require("./GeopointFieldDiff.styles");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var GeopointFieldDiff = _ref => {
  var diff = _ref.diff,
      schemaType = _ref.schemaType;
  return /*#__PURE__*/React.createElement(_GeopointFieldDiff.RootContainer, null, /*#__PURE__*/React.createElement(_GoogleMapsLoadProxy.GoogleMapsLoadProxy, null, api => /*#__PURE__*/React.createElement(GeopointDiff, {
    api: api,
    diff: diff,
    schemaType: schemaType
  })));
};

exports.GeopointFieldDiff = GeopointFieldDiff;

function GeopointDiff(_ref2) {
  var api = _ref2.api,
      diff = _ref2.diff;
  var fromValue = diff.fromValue,
      toValue = diff.toValue;
  var annotation = (0, _diff.getAnnotationAtPath)(diff, ['lat']) || (0, _diff.getAnnotationAtPath)(diff, ['lng']) || (0, _diff.getAnnotationAtPath)(diff, []);
  var center = getCenter(diff, api);
  var bounds = fromValue && toValue ? getBounds(fromValue, toValue, api) : undefined;
  return /*#__PURE__*/React.createElement(_diff.DiffTooltip, {
    annotations: annotation ? [annotation] : [],
    description: getAction(diff)
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(_Map.GoogleMap, {
    api: api,
    location: center,
    mapTypeControl: false,
    controlSize: 20,
    bounds: bounds,
    scrollWheel: false
  }, map => /*#__PURE__*/React.createElement(_GeopointMove.GeopointMove, {
    api: api,
    map: map,
    diff: diff
  }))));
}

function getBounds(fromValue, toValue, api) {
  return new api.LatLngBounds().extend(fromValue).extend(toValue);
}

function getCenter(diff, api) {
  var fromValue = diff.fromValue,
      toValue = diff.toValue;

  if (fromValue && toValue) {
    return getBounds(fromValue, toValue, api).getCenter().toJSON();
  }

  if (fromValue) {
    return fromValue;
  }

  if (toValue) {
    return toValue;
  }

  throw new Error('Neither a from or a to value present');
}

function getAction(diff) {
  var fromValue = diff.fromValue,
      toValue = diff.toValue;

  if (fromValue && toValue) {
    return 'Moved';
  } else if (fromValue) {
    return 'Removed';
  } else if (toValue) {
    return 'Added';
  }

  return 'Unchanged';
}