"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GeopointMove = GeopointMove;

var React = _interopRequireWildcard(require("react"));

var _userColor = require("@sanity/base/user-color");

var _Marker = require("../map/Marker");

var _Arrow = require("../map/Arrow");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function GeopointMove(_ref) {
  var diff = _ref.diff,
      api = _ref.api,
      map = _ref.map,
      label = _ref.label;
  var from = diff.fromValue,
      to = diff.toValue;
  var annotation = diff.isChanged ? diff.annotation : undefined;
  var userColor = (0, _userColor.useUserColor)(annotation ? annotation.author : null) || undefined;
  var fromRef = React.useRef();
  var toRef = React.useRef();
  return /*#__PURE__*/React.createElement(React.Fragment, null, from && /*#__PURE__*/React.createElement(_Marker.Marker, {
    api: api,
    map: map,
    position: from,
    zIndex: 0,
    opacity: 0.55,
    markerRef: fromRef,
    color: userColor
  }), from && to && /*#__PURE__*/React.createElement(_Arrow.Arrow, {
    api: api,
    map: map,
    from: from,
    to: to,
    zIndex: 1,
    color: userColor
  }), to && /*#__PURE__*/React.createElement(_Marker.Marker, {
    api: api,
    map: map,
    position: to,
    zIndex: 2,
    markerRef: toRef,
    label: label,
    color: userColor
  }));
}