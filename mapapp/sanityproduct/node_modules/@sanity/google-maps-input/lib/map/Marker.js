"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Marker = void 0;

var React = _interopRequireWildcard(require("react"));

var _util = require("./util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var markerPath = 'M 3.052 3.7 C 1.56 5.293 0.626 7.612 0.663 9.793 C 0.738 14.352 2.793 16.077 6.078 22.351 C 7.263 25.111 8.497 28.032 9.672 32.871 C 9.835 33.584 9.994 34.246 10.069 34.305 C 10.143 34.362 10.301 33.697 10.465 32.983 C 11.639 28.145 12.875 25.226 14.059 22.466 C 17.344 16.192 19.398 14.466 19.474 9.908 C 19.511 7.727 18.574 5.405 17.083 3.814 C 15.379 1.994 12.809 0.649 10.069 0.593 C 7.328 0.536 4.756 1.882 3.052 3.7 Z';

class Marker extends React.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "marker", void 0);

    _defineProperty(this, "eventHandlers", {});
  }

  componentDidMount() {
    var _this$props = this.props,
        position = _this$props.position,
        api = _this$props.api,
        map = _this$props.map,
        onMove = _this$props.onMove,
        zIndex = _this$props.zIndex,
        opacity = _this$props.opacity,
        label = _this$props.label,
        markerRef = _this$props.markerRef,
        color = _this$props.color;
    var GMarker = api.Marker;
    var icon;

    if (color) {
      icon = {
        path: markerPath,
        fillOpacity: 1,
        fillColor: color.background,
        strokeColor: color.border,
        strokeWeight: 2,
        anchor: new api.Point(10, 35),
        labelOrigin: new api.Point(10, 11)
      };
    }

    this.marker = new GMarker({
      draggable: Boolean(onMove),
      position,
      map,
      zIndex,
      opacity,
      label,
      icon
    });

    if (markerRef) {
      markerRef.current = this.marker;
    }

    this.attachMoveHandler();
    this.attachClickHandler();
  }

  componentDidUpdate(prevProps) {
    if (!this.marker) {
      return;
    }

    var _this$props2 = this.props,
        position = _this$props2.position,
        onMove = _this$props2.onMove,
        label = _this$props2.label,
        zIndex = _this$props2.zIndex,
        opacity = _this$props2.opacity,
        map = _this$props2.map;

    if (prevProps.onMove !== onMove) {
      this.attachMoveHandler();
    }

    if (!(0, _util.latLngAreEqual)(prevProps.position, position)) {
      this.marker.setPosition(position);
    }

    if (prevProps.label !== label) {
      this.marker.setLabel(label || null);
    }

    if (prevProps.zIndex !== zIndex) {
      this.marker.setZIndex(zIndex || null);
    }

    if (prevProps.opacity !== opacity) {
      this.marker.setOpacity(opacity || null);
    }

    if (prevProps.map !== map) {
      this.marker.setMap(map);
    }
  }

  componentWillUnmount() {
    if (this.eventHandlers.move) {
      this.eventHandlers.move.remove();
    }

    if (this.marker) {
      this.marker.setMap(null);
    }
  }

  attachMoveHandler() {
    var _this$props3 = this.props,
        api = _this$props3.api,
        onMove = _this$props3.onMove;

    if (this.eventHandlers.move) {
      this.eventHandlers.move.remove();
    }

    if (this.marker && onMove) {
      this.eventHandlers.move = api.event.addListener(this.marker, 'dragend', onMove);
    }
  }

  attachClickHandler() {
    var _this$props4 = this.props,
        api = _this$props4.api,
        onClick = _this$props4.onClick;

    if (this.eventHandlers.click) {
      this.eventHandlers.click.remove();
    }

    if (this.marker && onClick) {
      this.eventHandlers.click = api.event.addListener(this.marker, 'click', onClick);
    }
  } // eslint-disable-next-line class-methods-use-this


  render() {
    return null;
  }

}

exports.Marker = Marker;