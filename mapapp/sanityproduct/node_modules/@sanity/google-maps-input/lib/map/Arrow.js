"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Arrow = void 0;

var React = _interopRequireWildcard(require("react"));

var _util = require("./util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Arrow extends React.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "line", void 0);

    _defineProperty(this, "eventHandlers", {});
  }

  componentDidMount() {
    var _this$props = this.props,
        from = _this$props.from,
        to = _this$props.to,
        api = _this$props.api,
        map = _this$props.map,
        zIndex = _this$props.zIndex,
        onClick = _this$props.onClick,
        color = _this$props.color,
        arrowRef = _this$props.arrowRef;
    var lineSymbol = {
      path: api.SymbolPath.FORWARD_OPEN_ARROW
    };
    this.line = new api.Polyline({
      map,
      zIndex,
      path: [from, to],
      icons: [{
        icon: lineSymbol,
        offset: '50%'
      }],
      strokeOpacity: 0.55,
      strokeColor: color ? color.text : 'black'
    });

    if (onClick) {
      this.eventHandlers.click = api.event.addListener(this.line, 'click', onClick);
    }

    if (arrowRef) {
      arrowRef.current = this.line;
    }
  }

  componentDidUpdate(prevProps) {
    if (!this.line) {
      return;
    }

    var _this$props2 = this.props,
        from = _this$props2.from,
        to = _this$props2.to,
        map = _this$props2.map;

    if (!(0, _util.latLngAreEqual)(prevProps.from, from) || !(0, _util.latLngAreEqual)(prevProps.to, to)) {
      this.line.setPath([from, to]);
    }

    if (prevProps.map !== map) {
      this.line.setMap(map);
    }
  }

  componentWillUnmount() {
    if (this.line) {
      this.line.setMap(null);
    }

    if (this.eventHandlers.click) {
      this.eventHandlers.click.remove();
    }
  } // eslint-disable-next-line class-methods-use-this


  render() {
    return null;
  }

}

exports.Arrow = Arrow;