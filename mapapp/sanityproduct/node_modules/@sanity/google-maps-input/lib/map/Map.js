"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GoogleMap = void 0;

var _react = _interopRequireDefault(require("react"));

var _util = require("./util");

var _Map = require("./Map.styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class GoogleMap extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      map: undefined
    });

    _defineProperty(this, "clickHandler", void 0);

    _defineProperty(this, "mapRef", /*#__PURE__*/_react.default.createRef());

    _defineProperty(this, "mapEl", null);

    _defineProperty(this, "attachClickHandler", () => {
      var map = this.state.map;

      if (!map) {
        return;
      }

      var _this$props = this.props,
          api = _this$props.api,
          onClick = _this$props.onClick;
      var event = api.event;

      if (this.clickHandler) {
        this.clickHandler.remove();
      }

      if (onClick) {
        this.clickHandler = event.addListener(map, 'click', onClick);
      }
    });

    _defineProperty(this, "setMapElement", element => {
      if (element && element !== this.mapEl) {
        var _map = this.constructMap(element);

        this.setState({
          map: _map
        }, this.attachClickHandler);
      }

      this.mapEl = element;
    });
  }

  componentDidMount() {
    this.attachClickHandler();
  }

  componentDidUpdate(prevProps) {
    var map = this.state.map;

    if (!map) {
      return;
    }

    var _this$props2 = this.props,
        onClick = _this$props2.onClick,
        location = _this$props2.location,
        bounds = _this$props2.bounds;

    if (prevProps.onClick !== onClick) {
      this.attachClickHandler();
    }

    if (!(0, _util.latLngAreEqual)(prevProps.location, location)) {
      map.panTo(this.getCenter());
    }

    if (bounds && (!prevProps.bounds || !bounds.equals(prevProps.bounds))) {
      map.fitBounds(bounds);
    }
  }

  componentWillUnmount() {
    if (this.clickHandler) {
      this.clickHandler.remove();
    }
  }

  getCenter() {
    var _this$props3 = this.props,
        location = _this$props3.location,
        api = _this$props3.api;
    return new api.LatLng(location.lat, location.lng);
  }

  constructMap(el) {
    var _this$props4 = this.props,
        defaultZoom = _this$props4.defaultZoom,
        api = _this$props4.api,
        mapTypeControl = _this$props4.mapTypeControl,
        controlSize = _this$props4.controlSize,
        bounds = _this$props4.bounds,
        scrollWheel = _this$props4.scrollWheel;
    var map = new api.Map(el, {
      zoom: defaultZoom,
      center: this.getCenter(),
      scrollwheel: scrollWheel,
      streetViewControl: false,
      mapTypeControl,
      controlSize
    });

    if (bounds) {
      map.fitBounds(bounds);
    }

    return map;
  }

  render() {
    var children = this.props.children;
    var map = this.state.map;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_Map.MapContainer, {
      ref: this.setMapElement
    }), children && map ? children(map) : null);
  }

}

exports.GoogleMap = GoogleMap;

_defineProperty(GoogleMap, "defaultProps", {
  defaultZoom: 8,
  scrollWheel: true
});