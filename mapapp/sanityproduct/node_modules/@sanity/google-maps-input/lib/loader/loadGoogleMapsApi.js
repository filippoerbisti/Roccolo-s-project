"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadGoogleMapsApi = loadGoogleMapsApi;

var _rxjs = require("rxjs");

var _googleMapsInput = _interopRequireDefault(require("config:@sanity/google-maps-input"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @todo: remove the following line when part imports has been removed from this file
///<reference types="@sanity/types/parts" />
var callbackName = '___sanity_googleMapsApiCallback';
var authFailureCallbackName = 'gm_authFailure';
var locale = typeof window !== 'undefined' && window.navigator.language || 'en';
var subject;

function loadGoogleMapsApi() {
  var selectedLocale = _googleMapsInput.default.defaultLocale || locale || 'en-US';

  if (subject) {
    return subject;
  }

  subject = new _rxjs.BehaviorSubject({
    loadState: 'loading'
  });

  window[authFailureCallbackName] = () => {
    delete window[authFailureCallbackName];
    subject.next({
      loadState: 'authError'
    });
  };

  window[callbackName] = () => {
    delete window[callbackName];
    subject.next({
      loadState: 'loaded',
      api: window.google.maps
    });
  };

  var script = document.createElement('script');

  script.onerror = (event, source, lineno, colno, error) => subject.next({
    loadState: 'loadError',
    error: coeerceError(event, error)
  });

  script.src = "https://maps.googleapis.com/maps/api/js?key=".concat(_googleMapsInput.default.apiKey, "&libraries=places&callback=").concat(callbackName, "&language=").concat(selectedLocale);
  document.getElementsByTagName('head')[0].appendChild(script);
  return subject;
}

function coeerceError(event, error) {
  if (error) {
    return error;
  }

  if (typeof event === 'string') {
    return new Error(event);
  }

  return new Error(isErrorEvent(event) ? event.message : 'Failed to load Google Maps API');
}

function isErrorEvent(event) {
  if (typeof event !== 'object' || event === null) {
    return false;
  }

  if (!('message' in event)) {
    return false;
  }

  return typeof event.message === 'string';
}